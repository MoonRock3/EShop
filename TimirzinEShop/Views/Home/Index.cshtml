@using TimirzinEShop.DB_Context
@using TimirzinEShop.Models
@model IndexParams
@{
    ViewData["Title"] = "Home Page";
}
<div class="row botMargin">
    <form action="@Url.Action("Index", "Home")" method="post" id="displayForm" class="col-sm-3">
    <div class="displayBlock">
        <label for="displaySorted" class="displayLbl">
            Поиск:
        </label>
        <input name="searchValue" type="search" id="displayFound" placeholder="Поиск" value="@Model.DisplayOptions.SearchValue" />
    </div>
    <div class="displayBlock">
        <label for="displaySorted" class="displayLbl">
            Сортировка:
        </label>
        <select name="sortBy" id="displaySorted" class="sort">
            <option value="None">Нет</option>
            <option value="Price">Цена</option>
            <option value="ProductName">Название</option>
        </select>
        <button name="btnDesc" type="button" class="btn-dark">↑</button>
        <input name="isDesc" type="checkbox" value="true" hidden />
    </div>
    <div class="displayBlock">
        <label for="filterType" class="displayLbl">
            Фильтр:
        </label>
        <select name="commonFilterType" id="filterType">
            <option value="None">Нет</option>
            <option value="Brand">Бренд</option>
            <option value="Price">Цена</option>
            <option value="CategoryName">Категория</option>
            <option value="Country">Страна</option>
        </select>
    </div>
    <div class="displayBlock" id="commonFilterValueBox">
        <label for="commonFilterValue" class="displayLbl">
            Значение фильтра:
        </label>
        <select name="commonFilterValue" id="commonFilterValueId"></select>
    </div>
    <div id="commonFilterValueRange" class="displayBlock">
        <div class="displayBlock">
            <label for="commonFilterMinValue" class="displayLbl">
                Нижняя граница значения:
            </label>
            <input name="commonFilterValueMin" type="number" id="commonFilterMinValue" value="0" />
        </div>
        <div class="displayBlock">
            <label for="commonFilterMaxValue" class="displayLbl">
                Верхняя граница значения:
            </label>
            <input name="commonFilterValueMax" type="number" id="commonFilterMaxValue" value="0" />
        </div>
    </div>

    <div class="displayBlock" id="categoryFilterTypeBox">
        <label for="categoryFilterType" class="displayLbl">
            Атрибут категории:
        </label>
        <select name="categoryFilterType" id="categoryFilterTypeId"></select>
    </div>
    <div class="displayBlock" id="categoryFilterValueBox">
        <label class="displayLbl">
            Значение атрибута:
        </label>
        <select name="categoryFilterValueSelect"></select>
    </div>
    <div id="categoryFilterValueRange" class="displayBlock">
        <div class="displayBlock">
            <label for="categoryFilterMinValue" class="displayLbl">
                Нижняя граница значения:
            </label>
            <input name="categoryFilterValueMin" type="number" id="categoryFilterMinValue" value="0" />
        </div>
        <div class="displayBlock">
            <label for="categoryFilterMaxValue" class="displayLbl">
                Верхняя граница значения:
            </label>
            <input name="categoryFilterValueMax" type="number" id="categoryFilterMaxValue" value="0" />
        </div>
    </div>
    <div class="center">
        <button class="btn-dark">Применить</button>
    </div>
    </form>
    <div class="row col-sm-9">
        @foreach (var item in Model.ProductViews)
        {
            <div class="col-sm-4">
                <div class="card item" id="@item.Id">
                    <div class="imgBlock">
                        <img class="cardImg" src="@item.Image">
                    </div>
                    <div class="row">
                        <div class="col-sm-6 zeroPad">Артикул:</div><div class="col-sm-6 text-right zeroPad"><small>@item.Id</small></div>
                        <div class="col-sm-5 zeroPad">Категория:</div><div class="col-sm-7 text-right zeroPad"><small>@item.CategoryName</small></div>
                        <div class="col-sm-6 zeroPad">Бренд:</div><div class="col-sm-6 text-right zeroPad"><small>@item.Brand</small></div>
                        <div class="col-sm-6 zeroPad">Страна:</div><div class="col-sm-6 text-right zeroPad"><small>@item.Country</small></div>
                        <div class="col-sm-6 zeroPad">Модель:</div><div class="col-sm-6 text-right zeroPad"><small>@item.Model</small></div>
                        <div class="col-sm-6 zeroPad">Цена:</div><div class="col-sm-6 text-right zeroPad"><small>@item.Price руб.</small></div>
                        <div class="col-sm-12 buyBlock">
                            <button class="btn-dark shadow buy" data-id="@item.Id">КУПИТЬ</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        @if (Model.ProductViews.Count == 0)
        {
            <h2 margin="100px" width="100%" class="text-center">Совпадений не найдено</h2>
        }
    </div>
</div>

<style>
    p {
        margin-bottom: 2px;
    }
    select, input[type="search"], input[type="number"]{
        height: 30px;
        width: 85%;
    }
    label{
        margin: 10px 0px;
    }
    #displayForm {
        padding:  0px 50px 0px 0px;
    }
    .center{
        width: 85%;
        margin-top: 20px;
        display: flex;
        justify-content: center;
    }
    .displayBlock {
        display: block;
        margin-right: 10px;
    }

    .displayLbl {
        display: block;
    }

    .buyBlock {
        padding: 12px;
        display: flex;
        justify-content: center;
    }

    .item {
        height: 400px;
        padding: 30px;
        margin: 10px;
    }

    .imgBlock {
        height: 150px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 20px;
    }

    .cardImg {
        max-height: 175px;
        max-width: 100%;
    }

    .zeroPad {
        padding: 0px;
    }

    .botMargin {
        margin-bottom: 50px;
    }
</style>
<script>
    var cards = document.querySelectorAll(".item");
    cards.forEach(x => {
        x.addEventListener(
            "click", e => {
                if (e.target.classList.contains("buy"))
                {
                    window.location.href = "/Cart/Add?id=" + e.target.dataset.id;
                }
                else
                {
                    window.location.href = "/Home/DetailedProduct?id=" + x.id;
                }
            }
        );
        x.style.cursor = "pointer";
    });

    var form = document.querySelector("#displayForm");
    var btnDesc = form.btnDesc;
    var sortBy = form.sortBy;
    var isDesc = form.isDesc;
    var commonFilterValue = form.commonFilterValue;
    var commonFilterType = form.commonFilterType;
    var commonFilterValueRange = document.querySelector("#commonFilterValueRange");
    var commonFilterValueBox = document.querySelector("#commonFilterValueBox");
    var categoryFilterType = form.categoryFilterType;
    var categoryFilterTypeBox = document.querySelector("#categoryFilterTypeBox");
    var categoryFilterValueBox = document.querySelector("#categoryFilterValueBox");
    var categoryFilterValueSelect = form.categoryFilterValueSelect;
    var categoryFilterValueRange = document.querySelector("#categoryFilterValueRange");

    sortBy.addEventListener("change", x => {
        if (sortBy.selectedIndex == 0) {
            switchVisibility(btnDesc, false);
        } else {
            switchVisibility(btnDesc);
        }
    });
    btnDesc.addEventListener("click", x => {
        if (btnDesc.innerText === "↑") {
            btnDesc.innerText = "↓";
            isDesc.checked = true;
        }
        else {
            btnDesc.innerText = "↑";
            isDesc.checked = false;
        }
    });
    commonFilterType.addEventListener("change", x =>
    {
        switchVisibility(categoryFilterValueBox, false);
        switchVisibility(categoryFilterValueRange, false);
        while (commonFilterValue.options.length > 0) {
            commonFilterValue.options.remove(0);
        }
        form.commonFilterValueMin.value = 0;
        form.commonFilterValueMax.value = 0;
        form.categoryFilterValueMin.value = 0;
        form.categoryFilterValueMax.value = 0;
        while (categoryFilterType.options.length > 0) {
            categoryFilterType.options.remove(0);
        }
        switch (commonFilterType.value) {
            case "None":
                switchVisibility(commonFilterValueRange, false);
                switchVisibility(commonFilterValueBox, false);
                switchVisibility(categoryFilterTypeBox, false);
                break;
            case "CategoryName":
                setCommonFilterTypeList();
                switchVisibility(categoryFilterTypeBox);
                switchVisibility(commonFilterValueRange, false);
                switchVisibility(commonFilterValueBox);
                break;
            case "Brand":
            case "Country":
                setCommonFilterTypeList();
                switchVisibility(commonFilterValueBox);
                switchVisibility(commonFilterValueRange, false);
                switchVisibility(categoryFilterTypeBox, false);
                break;
            case "Price":
                switchVisibility(commonFilterValueRange);
                switchVisibility(commonFilterValueBox, false);
                switchVisibility(categoryFilterTypeBox, false);
                switchVisibility(categoryFilterValueBox, false);
                switchVisibility(categoryFilterValueRange, false);
                break;
            default:
                break;
        }
    });

    commonFilterValue.addEventListener("change", x =>
    {
        switchVisibility(categoryFilterValueBox, false);
        switchVisibility(categoryFilterValueRange, false);
        if (commonFilterType.value === "CategoryName") {
            while (categoryFilterType.options.length > 0) {
                categoryFilterType.options.remove(0);
            }
            setCategoryFilterTypesList();
        }
    }
    );

    categoryFilterType.addEventListener("change", x => {
        while (categoryFilterValueSelect.options.length > 0)
        {
            categoryFilterValueSelect.options.remove(0);
        }
        setCategoryFilterValuesList()
    });

    if (@((Model.DisplayOptions.IsDesc).CompareTo(false))){
        btnDesc.click();
    }
    if (@((Model.DisplayOptions.SortBy.Equals(SortBy.None)).CompareTo(false))){
        switchVisibility(btnDesc, false);
    }
    sortBy.value = "@Html.Raw(Model.DisplayOptions.SortBy)";
    commonFilterType.value = "@Html.Raw(Model.DisplayOptions.CommonFilterType)";

    switchVisibility(categoryFilterValueBox, false);
    switchVisibility(categoryFilterValueRange, false);

    commonFilterType.dispatchEvent(new Event("change"));
    form.commonFilterValueMin.value = "@Html.Raw(Model.DisplayOptions.CommonFilterValueMin)";
    form.commonFilterValueMax.value = "@Html.Raw(Model.DisplayOptions.CommonFilterValueMax)";
    
    form.categoryFilterValueMin.value = "@Html.Raw(Model.DisplayOptions.CategoryFilterValueMin)";
    form.categoryFilterValueMax.value = "@Html.Raw(Model.DisplayOptions.CategoryFilterValueMax)";
    function switchVisibility(obj, isVisible = true) {
        if (isVisible)
        {
            obj.hidden = false;
        } else {
            obj.hidden = true;
        }
    }
    function setCommonFilterTypeList()
    {
        fetch("@Url.Action("GetCommonFilterValuesList", "Home")" + "?type=" + commonFilterType.value,
            {
                method: "POST"
            })
            .then(result => result.json())
            .then(json =>
            {
                json.forEach(x =>
                {
                    commonFilterValue.options.add(new Option(x.text, x.text));
                });
                for (var i = 0; i < commonFilterValue.options.length; i++)
                {
                    if (commonFilterValue.options[i].value === "@Html.Raw(Model.DisplayOptions.CommonFilterValue)")
                    {
                        commonFilterValue.selectedIndex = i;
                        break;
                    }
                }
                commonFilterValue.dispatchEvent(new Event("change"));
            }).catch(error => console.log(error));
    }
    function setCategoryFilterTypesList(){
            fetch(`@Url.Action("GetCategoryFilterTypesList", "Home")?category=${commonFilterValue.value}`,
                {
                    method: "POST"
                }
            ).then(result => result.json())
                .then(json =>
                {
                    categoryFilterType.options.add(new Option("Не выбрано", "Не выбрано"));

                    json.forEach(x =>
                    {
                        categoryFilterType.options.add(new Option(x.text, x.text));
                    });
                    for (var i = 0; i < categoryFilterType.options.length; i++)
                    {
                        if (categoryFilterType.options[i].value === "@Html.Raw(Model.DisplayOptions.CategoryFilterType)")
                        {
                            categoryFilterType.selectedIndex = i;
                            break;
                        }
                    }
                    categoryFilterType.dispatchEvent(new Event("change"));
                }).catch(error => console.log(error));
    }
    function setCategoryFilterValuesList()
    {
        if (categoryFilterType.value === "Не выбрано" || categoryFilterType.hidden || commonFilterType.value === "Не выбрано")
        {
            switchVisibility(categoryFilterValueBox, false);
            switchVisibility(categoryFilterValueRange, false);
            return;
        }
        fetch(`@Url.Action("GetCategoryFilterValuesList", "Home")?category=${commonFilterValue.value}&&filterType=${categoryFilterType.value}`,
            {
                method: "POST"
            })
            .then(result => result.json())
            .then(json =>
            {
                if (json[0].value === "notStringOrBool")
                {
                    switchVisibility(categoryFilterValueRange);
                    switchVisibility(categoryFilterValueBox, false);
                }
                else
                {
                    switchVisibility(categoryFilterValueRange, false);
                    switchVisibility(categoryFilterValueBox);
                    categoryFilterValueSelect.options.add(new Option("Не выбрано", "Не выбрано"));
                    json.forEach(x =>
                    {
                        categoryFilterValueSelect.options.add(new Option(x.text, x.text));
                    });
                    for (var i = 0; i < categoryFilterValueSelect.options.length; i++)
                    {
                        if (categoryFilterValueSelect.options[i].value === "@Html.Raw(Model.DisplayOptions.CategoryFilterValueSelect)")
                        {
                            categoryFilterValueSelect.selectedIndex = i;
                            break;
                        }
                    }
                }
            }).catch(error => console.log(error));
    }
</script>